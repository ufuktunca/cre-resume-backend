// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/user/service.go

package mocks

import (
	models "cre-resume-backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return _m.recorder
}

// Register mocks base method
func (_m *MockUserServiceInterface) Register(register *models.User) error {
	ret := _m.ctrl.Call(_m, "Register", register)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (_mr *MockUserServiceInterfaceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Register", reflect.TypeOf((*MockUserServiceInterface)(nil).Register), arg0)
}

// Login mocks base method
func (_m *MockUserServiceInterface) Login(login *models.Login) (*string, error) {
	ret := _m.ctrl.Call(_m, "Login", login)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (_mr *MockUserServiceInterfaceMockRecorder) Login(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Login", reflect.TypeOf((*MockUserServiceInterface)(nil).Login), arg0)
}

// ActivateUser mocks base method
func (_m *MockUserServiceInterface) ActivateUser(userID string) error {
	ret := _m.ctrl.Call(_m, "ActivateUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser
func (_mr *MockUserServiceInterfaceMockRecorder) ActivateUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ActivateUser", reflect.TypeOf((*MockUserServiceInterface)(nil).ActivateUser), arg0)
}
