// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/job-post/view.go

package mocks

import (
	models "cre-resume-backend/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockJobPostViewInterface is a mock of JobPostViewInterface interface
type MockJobPostViewInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJobPostViewInterfaceMockRecorder
}

// MockJobPostViewInterfaceMockRecorder is the mock recorder for MockJobPostViewInterface
type MockJobPostViewInterfaceMockRecorder struct {
	mock *MockJobPostViewInterface
}

// NewMockJobPostViewInterface creates a new mock instance
func NewMockJobPostViewInterface(ctrl *gomock.Controller) *MockJobPostViewInterface {
	mock := &MockJobPostViewInterface{ctrl: ctrl}
	mock.recorder = &MockJobPostViewInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockJobPostViewInterface) EXPECT() *MockJobPostViewInterfaceMockRecorder {
	return _m.recorder
}

// CreateJobPost mocks base method
func (_m *MockJobPostViewInterface) CreateJobPost(jobPost *models.JobPost, userID string) (*models.JobPost, error) {
	ret := _m.ctrl.Call(_m, "CreateJobPost", jobPost, userID)
	ret0, _ := ret[0].(*models.JobPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobPost indicates an expected call of CreateJobPost
func (_mr *MockJobPostViewInterfaceMockRecorder) CreateJobPost(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateJobPost", reflect.TypeOf((*MockJobPostViewInterface)(nil).CreateJobPost), arg0, arg1)
}

// GetJobPosts mocks base method
func (_m *MockJobPostViewInterface) GetJobPosts(jobPostType string, category string, from string, to string, sort string) (*[]models.JobPost, error) {
	ret := _m.ctrl.Call(_m, "GetJobPosts", jobPostType, category, from, to, sort)
	ret0, _ := ret[0].(*[]models.JobPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobPosts indicates an expected call of GetJobPosts
func (_mr *MockJobPostViewInterfaceMockRecorder) GetJobPosts(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetJobPosts", reflect.TypeOf((*MockJobPostViewInterface)(nil).GetJobPosts), arg0, arg1, arg2, arg3, arg4)
}

// ApplyJobPost mocks base method
func (_m *MockJobPostViewInterface) ApplyJobPost(jobPostDTO *models.ApplyJobPostDTO, userID string, jobID string) error {
	ret := _m.ctrl.Call(_m, "ApplyJobPost", jobPostDTO, userID, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyJobPost indicates an expected call of ApplyJobPost
func (_mr *MockJobPostViewInterfaceMockRecorder) ApplyJobPost(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ApplyJobPost", reflect.TypeOf((*MockJobPostViewInterface)(nil).ApplyJobPost), arg0, arg1, arg2)
}

// GetUserJobPosts mocks base method
func (_m *MockJobPostViewInterface) GetUserJobPosts(userEmail string, postType string) (*[]models.JobPost, error) {
	ret := _m.ctrl.Call(_m, "GetUserJobPosts", userEmail, postType)
	ret0, _ := ret[0].(*[]models.JobPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserJobPosts indicates an expected call of GetUserJobPosts
func (_mr *MockJobPostViewInterfaceMockRecorder) GetUserJobPosts(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetUserJobPosts", reflect.TypeOf((*MockJobPostViewInterface)(nil).GetUserJobPosts), arg0, arg1)
}

// GetUserAppliedJobs mocks base method
func (_m *MockJobPostViewInterface) GetUserAppliedJobs(userId string) (*[]models.JobPost, error) {
	ret := _m.ctrl.Call(_m, "GetUserAppliedJobs", userId)
	ret0, _ := ret[0].(*[]models.JobPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAppliedJobs indicates an expected call of GetUserAppliedJobs
func (_mr *MockJobPostViewInterfaceMockRecorder) GetUserAppliedJobs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetUserAppliedJobs", reflect.TypeOf((*MockJobPostViewInterface)(nil).GetUserAppliedJobs), arg0)
}

// GetJobApplies mocks base method
func (_m *MockJobPostViewInterface) GetJobApplies(jobId string) ([]models.CV, error) {
	ret := _m.ctrl.Call(_m, "GetJobApplies", jobId)
	ret0, _ := ret[0].([]models.CV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobApplies indicates an expected call of GetJobApplies
func (_mr *MockJobPostViewInterfaceMockRecorder) GetJobApplies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetJobApplies", reflect.TypeOf((*MockJobPostViewInterface)(nil).GetJobApplies), arg0)
}

// DeleteJobPost mocks base method
func (_m *MockJobPostViewInterface) DeleteJobPost(jobId string) error {
	ret := _m.ctrl.Call(_m, "DeleteJobPost", jobId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobPost indicates an expected call of DeleteJobPost
func (_mr *MockJobPostViewInterfaceMockRecorder) DeleteJobPost(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteJobPost", reflect.TypeOf((*MockJobPostViewInterface)(nil).DeleteJobPost), arg0)
}
